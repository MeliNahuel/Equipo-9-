import java.util.ArrayList;
import java.util.List;

public class Grafo {
    private int[][] matrizAdyacencia;
    private int numVertices;

    // Inicialización del grafo
    public Grafo(int numVertices) {
        this.numVertices = numVertices;
        matrizAdyacencia = new int[numVertices][numVertices]; // Matriz de adyacencia de numVertices x numVertices
    }

    // Agregar arista
    public void agregarArista(int origen, int destino) {
        if (origen >= 0 && origen < numVertices && destino >= 0 && destino < numVertices) {
            matrizAdyacencia[origen][destino] = 1; // Representa la arista de origen a destino
        }
    }

    // Eliminar arista
    public void eliminarArista(int origen, int destino) {
        if (origen >= 0 && origen < numVertices && destino >= 0 && destino < numVertices) {
            matrizAdyacencia[origen][destino] = 0; // Remueve la arista de origen a destino
        }
    }

    // Verificar si existe una arista
    public boolean verificarArista(int origen, int destino) {
        if (origen >= 0 && origen < numVertices && destino >= 0 && destino < numVertices) {
            return matrizAdyacencia[origen][destino] == 1;
        }
        return false;
    }

    // Listar adyacentes de un vértice dado
    public List<Integer> listarAdyacentes(int vertice) {
        List<Integer> adyacentes = new ArrayList<>();
        if (vertice >= 0 && vertice < numVertices) {
            for (int i = 0; i < numVertices; i++) {
                if (matrizAdyacencia[vertice][i] == 1) {
                    adyacentes.add(i);
                }
            }
        }
        return adyacentes;
    }

    // Contar grado de salida de un vértice (número de aristas que salen del vértice)
    public int contarGradoSalida(int vertice) {
        int gradoSalida = 0;
        if (vertice >= 0 && vertice < numVertices) {
            for (int i = 0; i < numVertices; i++) {
                if (matrizAdyacencia[vertice][i] == 1) {
                    gradoSalida++;
                }
            }
        }
        return gradoSalida;
    }

    // Contar grado de entrada de un vértice (número de aristas que entran al vértice)
    public int contarGradoEntrada(int vertice) {
        int gradoEntrada = 0;
        if (vertice >= 0 && vertice < numVertices) {
            for (int i = 0; i < numVertices; i++) {
                if (matrizAdyacencia[i][vertice] == 1) {
                    gradoEntrada++;
                }
            }
        }
        return gradoEntrada;
    }

    // Mostrar la matriz de adyacencia
    public void mostrarMatrizAdyacencia() {
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                System.out.print(matrizAdyacencia[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Grafo grafo = new Grafo(5); // Crear un grafo con 5 vértices

        // Agregar algunas aristas
        grafo.agregarArista(0, 1);
        grafo.agregarArista(0, 2);
        grafo.agregarArista(1, 2);
        grafo.agregarArista(2, 3);
        grafo.agregarArista(3, 4);

        // Mostrar la matriz de adyacencia
        System.out.println("Matriz de adyacencia:");
        grafo.mostrarMatrizAdyacencia();

        // Verificar si existe una arista
        System.out.println("\n¿Existe una arista entre 0 y 1? " + grafo.verificarArista(0, 1));
        System.out.println("¿Existe una arista entre 1 y 3? " + grafo.verificarArista(1, 3));

        // Listar los adyacentes del vértice 0
        System.out.println("\nAdyacentes del vértice 0: " + grafo.listarAdyacentes(0));

        // Contar grado de salida y grado de entrada del vértice 2
        System.out.println("\nGrado de salida del vértice 2: " + grafo.contarGradoSalida(2));
        System.out.println("Grado de entrada del vértice 2: " + grafo.contarGradoEntrada(2));
    }
}
