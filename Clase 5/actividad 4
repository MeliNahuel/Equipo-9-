import java.util.*;

class Dijkstra {
    
    // Clase para representar un nodo del grafo y su peso
    static class Node implements Comparable<Node> {
        int vertex;
        int weight;

        public Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }

        // Método para comparar nodos basado en el peso (distancia)
        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.weight, other.weight);
        }
    }

    // Método para ejecutar el algoritmo de Dijkstra
    public static int[] dijkstra(List<List<Node>> graph, int source) {
        // Inicializar distancias a infinito
        int[] dist = new int[graph.size()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        // Cola de prioridad (mínimos)
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.add(new Node(source, 0));

        // Conjunto de nodos visitados
        boolean[] visited = new boolean[graph.size()];

        while (!pq.isEmpty()) {
            Node current = pq.poll();  // Nodo con menor distancia
            int u = current.vertex;

            // Si ya fue visitado, se ignora
            if (visited[u]) continue;

            // Marcar el nodo como visitado
            visited[u] = true;

            // Explorar los vecinos del nodo actual
            for (Node neighbor : graph.get(u)) {
                int v = neighbor.vertex;
                int weight = neighbor.weight;

                // Relajación: Si se encuentra una distancia más corta
                if (!visited[v] && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        // Crear el grafo como una lista de adyacencia
        int numVertices = 5;
        List<List<Node>> graph = new ArrayList<>();

        for (int i = 0; i < numVertices; i++) {
            graph.add(new ArrayList<>());
        }

        // Agregar las aristas con sus pesos (tiempos de viaje)
        graph.get(0).add(new Node(1, 10));  // A -> B (10 minutos)
        graph.get(0).add(new Node(2, 3));   // A -> C (3 minutos)
        graph.get(1).add(new Node(0, 10));  // B -> A (10 minutos)
        graph.get(1).add(new Node(2, 1));   // B -> C (1 minuto)
        graph.get(1).add(new Node(3, 2));   // B -> D (2 minutos)
        graph.get(2).add(new Node(0, 3));   // C -> A (3 minutos)
        graph.get(2).add(new Node(1, 1));   // C -> B (1 minuto)
        graph.get(2).add(new Node(3, 8));   // C -> D (8 minutos)
        graph.get(2).add(new Node(4, 2));   // C -> E (2 minutos)
        graph.get(3).add(new Node(1, 2));   // D -> B (2 minutos)
        graph.get(3).add(new Node(2, 8));   // D -> C (8 minutos)
        graph.get(3).add(new Node(4, 7));   // D -> E (7 minutos)
        graph.get(4).add(new Node(2, 2));   // E -> C (2 minutos)
        graph.get(4).add(new Node(3, 7));   // E -> D (7 minutos)

        // Ejecutar Dijkstra desde el nodo A (índice 0)
        int[] dist = dijkstra(graph, 0);

        // Mostrar las distancias mínimas desde el nodo A
        for (int i = 0; i < dist.length; i++) {
            System.out.println("Distancia desde A a " + (char)('A' + i) + " es " + dist[i] + " minutos.");
        }
    }
}
