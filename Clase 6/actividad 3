import java.util.ArrayList;
import java.util.List;

public class FuerzaBruta {

    public static int fuerzaBruta(int[] costos, int[] beneficios, int presupuesto) {
        return calcularMaxBeneficio(costos, beneficios, presupuesto, 0, 0, 0);
    }

    private static int calcularMaxBeneficio(int[] costos, int[] beneficios, int presupuesto, int indice, int costoActual, int beneficioActual) {
        // Si hemos recorrido todos los proyectos, devolvemos el beneficio actual.
        if (indice == costos.length) {
            return beneficioActual;
        }

        // Opción 1: No tomar este proyecto.
        int beneficioSinEste = calcularMaxBeneficio(costos, beneficios, presupuesto, indice + 1, costoActual, beneficioActual);

        // Opción 2: Tomar este proyecto si no excede el presupuesto.
        int beneficioConEste = 0;
        if (costoActual + costos[indice] <= presupuesto) {
            beneficioConEste = calcularMaxBeneficio(costos, beneficios, presupuesto, indice + 1, costoActual + costos[indice], beneficioActual + beneficios[indice]);
        }

        // Devolvemos el máximo entre las dos opciones.
        return Math.max(beneficioSinEste, beneficioConEste);
    }

    public static void main(String[] args) {
        int[] costos = {10, 15, 20, 25};
        int[] beneficios = {100, 200, 150, 300};
        int presupuesto = 40;

        System.out.println("Máximo beneficio (Fuerza Bruta): " + fuerzaBruta(costos, beneficios, presupuesto));
    }
}
------------------------------------------------------------------------------------------
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

public class seleccionOptimaProcesos {
	 static class Proyecto {
		 int costo;
		 int beneficio;

		 public Proyecto(int costo, int beneficio) {
			 this.costo = costo;
			 this.beneficio = beneficio;
	        }

		 public double relacionBeneficioCosto() {
			 return (double) beneficio / costo;
	        }
	    }

    public static int fuerzaBruta(int[] costos, int[] beneficios, int presupuesto) {
    	int maximoBeneficio = 0;
    	
    	for(int i = 0; i < (1 << costos.length); i++) { // (1 << costos.length) == 2^n probamos todas las combinaciones posibles
    		int costoTotal = 0;
    	    int beneficioTotal = 0;
    		for(int j = 0; j < costos.length; j++) {
    			if ((i & (1 << j)) != 0) {		//esta condición verifica si el bit correspondiente al proyecto j está encendido en la combinación i, lo que indica que el proyecto j está incluido en esa combinación.
	    			costoTotal += costos[j];
	                beneficioTotal += beneficios[j];
    			}
    		}
    		if(costoTotal <= presupuesto) {
    			maximoBeneficio = Math.max(maximoBeneficio, beneficioTotal);
    		}
    	}

        return maximoBeneficio;
    }
    
    public static int greedy(int[] costos, int[] beneficios, int presupuesto) {
        int n = costos.length;
        List<Proyecto> proyectos = new ArrayList<>();

        // Crear una lista de proyectos con su relación beneficio/costo.
        for (int i = 0; i < n; i++) {
            proyectos.add(new Proyecto(costos[i], beneficios[i]));
        }

        // Ordenar los proyectos por la mejor relación beneficio/costo.
        
        for (int i = 0; i < proyectos.size() - 1; i++) {
            for (int j = i + 1; j < proyectos.size(); j++) {
                if (proyectos.get(i).relacionBeneficioCosto() < proyectos.get(j).relacionBeneficioCosto()) {
                    Proyecto temp = proyectos.get(i);
                    proyectos.set(i, proyectos.get(j));
                    proyectos.set(j, temp);
                }
            }
        }
        
        int costoTotal = 0;
        int beneficioTotal = 0;

        // Seleccionar proyectos de acuerdo con la estrategia greedy.
        for (Proyecto proyecto : proyectos) {
            if (costoTotal + proyecto.costo <= presupuesto) {
                costoTotal += proyecto.costo;
                beneficioTotal += proyecto.beneficio;
            }
        }

        return beneficioTotal;
    }
    
    public static void main(String[] args) {
        int[] costos = {10, 15, 20, 25};
        int[] beneficios = {100, 200, 150, 300};
        int presupuesto = 40;

        System.out.println("Máximo beneficio (Fuerza Bruta): " + fuerzaBruta(costos, beneficios, presupuesto));
        System.out.println("Máximo beneficio (Greedy): " + greedy(costos, beneficios, presupuesto));
    }

------------------------------------------------------------------------------------------
import java.util.Arrays;

public class Greedy {

    public static int greedy(int[] costos, int[] beneficios, int presupuesto) {
        int n = costos.length;
        Proyecto[] proyectos = new Proyecto[n];

        // Crear una lista de proyectos con su relación beneficio/costo.
        for (int i = 0; i < n; i++) {
            proyectos[i] = new Proyecto(costos[i], beneficios[i]);
        }

        // Ordenar los proyectos por la mejor relación beneficio/costo.
        Arrays.sort(proyectos, (a, b) -> Double.compare(b.beneficioPorCosto(), a.beneficioPorCosto()));

        int beneficioTotal = 0;
        int costoActual = 0;

        // Seleccionar proyectos de acuerdo con la estrategia greedy.
        for (int i = 0; i < n; i++) {
            if (costoActual + proyectos[i].costo <= presupuesto) {
                costoActual += proyectos[i].costo;
                beneficioTotal += proyectos[i].beneficio;
            }
        }

        return beneficioTotal;
    }

    static class Proyecto {
        int costo;
        int beneficio;

        public Proyecto(int costo, int beneficio) {
            this.costo = costo;
            this.beneficio = beneficio;
        }

        public double beneficioPorCosto() {
            return (double) beneficio / costo;
        }
    }

    public static void main(String[] args) {
        int[] costos = {10, 15, 20, 25};
        int[] beneficios = {100, 200, 150, 300};
        int presupuesto = 40;

        System.out.println("Máximo beneficio (Greedy): " + greedy(costos, beneficios, presupuesto));
    }
}
------------------------------------------------------------------------------------------------------------------
public class ProgramacionDinamica {

    public static int programacionDinamica(int[] costos, int[] beneficios, int presupuesto) {
        int n = costos.length;
        int[][] dp = new int[n + 1][presupuesto + 1];

        // Rellenar la tabla dp.
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= presupuesto; j++) {
                if (costos[i - 1] <= j) {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - costos[i - 1]] + beneficios[i - 1]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][presupuesto];
    }

    public static void main(String[] args) {
        int[] costos = {10, 15, 20, 25};
        int[] beneficios = {100, 200, 150, 300};
        int presupuesto = 40;

        System.out.println("Máximo beneficio (Programación Dinámica): " + programacionDinamica(costos, beneficios, presupuesto));
    }
}
