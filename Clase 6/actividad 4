class PaqueteInversion {
    int costo;
    int ganancia;

    public PaqueteInversion(int costo, int ganancia) {
        this.costo = costo;
        this.ganancia = ganancia;
    }
}
public class InversionFuerzaBruta {

    // Fuerza Bruta
    public static int seleccionFuerzaBruta(PaqueteInversion[] paquetes, int presupuesto, int n) {
        // Caso base
        if (n == 0 || presupuesto == 0) {
            return 0;
        }

        // Si el costo del paquete actual es mayor que el presupuesto, lo omitimos
        if (paquetes[n - 1].costo > presupuesto) {
            return seleccionFuerzaBruta(paquetes, presupuesto, n - 1);
        } else {
            // Máximo entre incluir o no el paquete actual
            return Math.max(paquetes[n - 1].ganancia + seleccionFuerzaBruta(paquetes, presupuesto - paquetes[n - 1].costo, n - 1),
                    seleccionFuerzaBruta(paquetes, presupuesto, n - 1));
        }
    }

    public static void main(String[] args) {
        PaqueteInversion[] paquetes = {
                new PaqueteInversion(12, 150),
                new PaqueteInversion(20, 200),
                new PaqueteInversion(15, 100),
                new PaqueteInversion(25, 300)
        };
        int presupuesto = 35;

        System.out.println("Ganancia máxima Fuerza Bruta: " +
                seleccionFuerzaBruta(paquetes, presupuesto, paquetes.length));
    }
}
--------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.List;

public class paquetesDeInversion {
	static class Paquete {
	    int costo;
	    int ganancia;

	    Paquete(int costo, int ganancia) {
	        this.costo = costo;
	        this.ganancia = ganancia;
	    }

	    double relacionGananciaCosto() {
	    	return (double) ganancia / costo;
	    }
	    	
	}
    public static void main(String[] args) {
    	int[] costos = {12, 20, 15, 25};
        int[] ganancias = {150, 200, 100, 300};
        int presupuesto = 35;
        
        System.out.println("La ganancia máxima es: " + maximizarGananciaGreedy(costos, ganancias,presupuesto));
    }
    
    public static int maximizarGananciaGreedy(int [] costos, int [] ganancias,int presupuesto) {
    	int n = costos.length;
        List<Paquete> paquetes = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            paquetes.add(new Paquete(costos[i], ganancias[i]));
        }
        
        for (int i = 0; i < paquetes.size() - 1; i++) {
            for (int j = i + 1; j < paquetes.size(); j++) {
                if (paquetes.get(i).relacionGananciaCosto() < paquetes.get(j).relacionGananciaCosto()) {
                	Paquete temp = paquetes.get(i);
                	paquetes.set(i, paquetes.get(j));
                	paquetes.set(j, temp);
                }
            }
        }
        
        int costoTotal = 0;
        int gananciaTotal = 0;

        for (Paquete paquete : paquetes) {
            if (costoTotal + paquete.costo <= presupuesto) {
                costoTotal += paquete.costo;
                gananciaTotal += paquete.ganancia;
            }
        }

        return gananciaTotal;
    }
}
--------------------------------------------------------------------------------------------------------------------------------

class PaqueteInversion {
    int costo;
    int ganancia;

    public PaqueteInversion(int costo, int ganancia) {
        this.costo = costo;
        this.ganancia = ganancia;
    }
}
public class InversionProgramacionDinamica {

    // Programación Dinámica
    public static int seleccionDinamica(PaqueteInversion[] paquetes, int presupuesto) {
        int n = paquetes.length;
        int[][] dp = new int[n + 1][presupuesto + 1];

        for (int i = 1; i <= n; i++) {
            for (int w = 0; w <= presupuesto; w++) {
                if (paquetes[i - 1].costo <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w],
                            dp[i - 1][w - paquetes[i - 1].costo] + paquetes[i - 1].ganancia);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
        return dp[n][presupuesto];
    }

    public static void main(String[] args) {
        PaqueteInversion[] paquetes = {
                new PaqueteInversion(12, 150),
                new PaqueteInversion(20, 200),
                new PaqueteInversion(15, 100),
                new PaqueteInversion(25, 300)
        };
        int presupuesto = 35;

        System.out.println("Ganancia máxima Programación Dinámica: " +
                seleccionDinamica(paquetes, presupuesto));
    }
}
---------------------------------------------------------------------------------------------------------
