Actividad 1.1

public class MaximoArray {
    public static int encontrarMaximo(int[] array) {
        int max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            }
        }
      return max;
    }
    public static void main(String[] args) {
        int[] numeros = {4, 7, 1, 9, 3};
        int maximo = encontrarMaximo(numeros);
        System.out.println("El Maximo es: " + maximo);
    }
}


/// Orden de complejidad asintótica:
//La complejidad asintótica del programa es ( O(n) ), donde ( n ) es el número de elementos en el array.
// Esto se debe a que el algoritmo debe recorrer todos los elementos del array una vez para encontrar el máximo.


public class FacturaciónSinMap {
    public static void main(String[] args) {
        int[][] facturas = {
                {1, 1, 100},
                {2, 2, 200},
                {3, 1, 150}
        };

        String[][] clientes = {
                {"1", "Cliente1"},
                {"2", "Cliente2"},
        };

        for (String[] cliente : clientes) {
            int idCliente = Integer.parseInt(cliente[0]);
            String nombreCliente = cliente[1];
            int sumaImportes = 0;

            for (int[] factura : facturas) {
                if (factura[1] == idCliente) {
                    sumaImportes += factura[2];
                }
            }

            System.out.println("ID Cliente: " + idCliente + ", Nombre: " + nombreCliente + ", Suma Importes: " + sumaImportes);
        }
    }
}

/// Diferencia en cuanto a la complejidad asintótica:
// Sin Map: La complejidad es ( O(n \times m) ), donde ( n ) es el número de clientes y ( m ) es el número de facturas. Esto se debe a que, para cada cliente, se recorre la lista completa de facturas.
// Con Map: La complejidad es ( O(n + m) ). Primero se recorre la lista de facturas una vez para sumar los importes por cliente (( O(m) )), y luego se recorre la lista de clientes para imprimir los resultados (( O(n) )).
// Esto es más eficiente que la implementación sin Map.

import java.util.HashMap;
import java.util.Map;

public class FacturaciónConMap {
    public static void main(String[] args) {
        int[][] facturas = {
                {1, 1, 100},
                {2, 2, 200},
                {3, 1, 150}
        };

        Map<Integer, String> clientes = new HashMap<>();
        clientes.put(1, "Cliente1");
        clientes.put(2, "Cliente2");

        Map<Integer, Integer> sumaImportesPorCliente = new HashMap<>();

        for (int[] factura : facturas) {
            int idCliente = factura[1];
            int importe = factura[2];

            sumaImportesPorCliente.put(idCliente, sumaImportesPorCliente.getOrDefault(idCliente, 0) + importe);
        }

        for (Map.Entry<Integer, Integer> entrada : sumaImportesPorCliente.entrySet()) {
            int idCliente = entrada.getKey();
            int sumaImportes = entrada.getValue();
            String nombreCliente = clientes.get(idCliente);

            System.out.println("ID Cliente: " + idCliente + ", Nombre: " + nombreCliente + ", Suma Importes: " + sumaImportes);
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------
// Otra manera de hacer con Maps
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EjecucionBconMaps {

    public static void main(String[] args) {
        
        List<Comprobante> comprobantes = new ArrayList<>();
        comprobantes.add(new Comprobante(1, 1, 100));
        comprobantes.add(new Comprobante(2, 1, 200));
        comprobantes.add(new Comprobante(3, 2, 150));
        comprobantes.add(new Comprobante(4, 2, 50));
        comprobantes.add(new Comprobante(5, 3, 300));

        List<Cliente> clientes = new ArrayList<>();
        clientes.add(new Cliente(1, "Tobias"));
        clientes.add(new Cliente(2, "Ezequiel"));
        clientes.add(new Cliente(3, "Martin"));

        
        List<ResumenCliente> resumen = generarResumen(comprobantes, clientes);

        
        for (ResumenCliente resumenCliente : resumen) {
            System.out.println("ID Cliente: " + resumenCliente.getIdCliente() +
                    ", Nombre Cliente: " + resumenCliente.getNombreCliente() +
                    ", Total Importe: " + resumenCliente.getTotalImporte());
        }
    }

    public static List<ResumenCliente> generarResumen(List<Comprobante> comprobantes, List<Cliente> clientes) {
        Map<Integer, Integer> clientTotals = new HashMap<>(); // 1

        for (Comprobante comprobante : comprobantes) { // 1 + 2(n+1) + n = 3n + 3
            int clienteId = comprobante.getClienteId();  // 1 + 2 = 3
            int importe = comprobante.getImporte();     // 1 + 2 = 3
            clientTotals.put(clienteId, clientTotals.getOrDefault(clienteId, 0) + importe);  // 1 + 4 = 5
        }

        List<ResumenCliente> resumen = new ArrayList<>();   // 1 
        for (Cliente cliente : clientes) {         //  1 + 2(n+1) + n = 3n + 3
            int clienteId = cliente.getIdCliente();     // 1 + 2 = 3
            String nombreCliente = cliente.getNombreCliente(); // 1 + 2 = 3
            int totalImporte = clientTotals.getOrDefault(clienteId, 0);  // 1 + 2 = 3
            resumen.add(new ResumenCliente(clienteId, nombreCliente, totalImporte));  // 3
        }

        return resumen; // 1
    }
}

class Comprobante {
    private int facturaId;
    private int clienteId;
    private int importe;

    public Comprobante(int facturaId, int clienteId, int importe) {
        this.facturaId = facturaId;
        this.clienteId = clienteId;
        this.importe = importe;
    }

    public int getClienteId() {
        return clienteId;
    }

    public int getImporte() {
        return importe;
    }
}

class Cliente {
    private int idCliente;
    private String nombreCliente;

    public Cliente(int idCliente, String nombreCliente) {
        this.idCliente = idCliente;
        this.nombreCliente = nombreCliente;
    }

    public int getIdCliente() {
        return idCliente;
    }

    public String getNombreCliente() {
        return nombreCliente;
    }
}

class ResumenCliente {
    private int idCliente;
    private String nombreCliente;
    private int totalImporte;

    public ResumenCliente(int idCliente, String nombreCliente, int totalImporte) {
        this.idCliente = idCliente;
        this.nombreCliente = nombreCliente;
        this.totalImporte = totalImporte;
    }

    public int getIdCliente() {
        return idCliente;
    }

    public String getNombreCliente() {
        return nombreCliente;
    }

    public int getTotalImporte() {
        return totalImporte;
    }
}
   /* f(n) = 1 + 3n + 3 + 3 + 3 + 5 + 1 + 3n + 3 + 3 + 3 + 3 + 3
      f(n) = 31 + 6n = O(n)
      f(n) = 31 + 6n  <= c . n
	  f(n) = 31/n + 6n/n <= c n/n
	  f(n) = 31/n + 6 <= c  
	  f(n) = 37 = c
	  O(n) n0 = 1 c = 37 */  
    
