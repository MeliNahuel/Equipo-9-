import java.util.Arrays;
 
public class FloydWarshall {
    // Definir el valor infinito para las distancias inicialmente no conocidas
    final static int INF = 99999, V = 4;
 
    void floydWarshall(int graph[][]) {
        int dist[][] = new int[V][V];
 
        // Inicializar la solución como una copia de la matriz del grafo
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }
 
        // Aplicar el algoritmo de Floyd-Warshall
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
 
        // Imprimir la matriz final con las distancias más cortas
        printSolution(dist);
    }
 
    void printSolution(int dist[][]) {
        System.out.println("Matriz con las distancias más cortas entre cada par de nodos:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j] + "   ");
            }
            System.out.println();
        }
    }
 
    public static void main(String[] args) {
        // Definir el grafo con 4 nodos y los pesos de las aristas
        int graph[][] = {
            {0, 2, INF, 5},
            {INF, 0, INF, 4},
            {INF, INF, 0, INF},
            {INF, 2, 2, 0}
        };
 
        // Crear una instancia y ejecutar el algoritmo de Floyd-Warshall
        FloydWarshall fw = new FloydWarshall();
        fw.floydWarshall(graph);
    }
}
