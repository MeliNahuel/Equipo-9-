package ejercicios;

//Ejercicio hecho por Dana


public class Main {
    public static void main(String[] args) {

        RedSocial social = new RedSocial();
        social.addUser(1, "Alicia");
        social.addUser(2, "Pepe");
        social.addUser(3, "Mauricio");
        social.addUser(4, "Matias");
        social.addUser(5, "Lucas");

        // Se agregan las amistades
        social.addAmistad(1, 2); // Alicia y Pepe
        social.addAmistad(1, 3); // Alicia y Mauricio
        social.addAmistad(2, 4); // Pepe y Matias 
        social.addAmistad(3, 5); // Mauricio y Lucas

        // Realizar recorrido DFS desde Alicia
        social.DFS(1);

        // Realizar recorrido BFS desde Alicia
        social.BFS(1);
        
        
    }
}
package ejercicios;

import java.util.ArrayList;
import java.util.List;

public class User {
    private int id;
    private String nombre;
    private List<User> amistades;

    public User(int id, String nombre) {
        this.id = id;
        this.nombre = nombre;
        this.amistades = new ArrayList<>();
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return nombre;
    }

    public List<User> getAmistades() {
        return amistades;
    }

    public void addAmistad(User amistad) {
        amistades.add(amistad);
    }
}

package ejercicios;

import java.util.*;

public class RedSocial {
    private Map<Integer, User> users;

    public RedSocial() {
        this.users = new HashMap<>();
    }

    
    public void addUser(int id, String name) {
        users.put(id, new User(id, name));
    }

    public void addAmistad(int userId1, int userId2) {
        User user1 = users.get(userId1);
        User user2 = users.get(userId2);
        if (user1 != null && user2 != null) {
            user1.addAmistad(user2);
            user2.addAmistad(user1);
        }
    }

    // DFS
    public void DFS(int userInicialId) {
        User usuarioInicial = users.get(userInicialId);
        if (usuarioInicial == null) return;

        Set<Integer> visitado = new HashSet<>();
        System.out.println("DFS desde " + usuarioInicial.getName() + ":");
        DFSUtil(usuarioInicial, visitado);
        System.out.println();
    }

    private void DFSUtil(User user, Set<Integer> visitado) {
        visitado.add(user.getId());
        System.out.print(user.getName() + " => ");
        for (User amigo : user.getAmistades()) {
            if (!visitado.contains(amigo.getId())) {
            	DFSUtil(amigo, visitado);
            }
        }
    }

    // BFS
    public void BFS(int userInicialId) {
        User usuarioInicial = users.get(userInicialId);
        if (usuarioInicial == null) return;

        Set<Integer> visitado = new HashSet<>();
        LinkedList<User> cola = new LinkedList<>();
        cola.add(usuarioInicial);
        
        visitado.add(usuarioInicial.getId());

        System.out.println("BFS desde " + usuarioInicial.getName() + ":");
        while (!cola.isEmpty()) {
            User user = cola.poll();
            System.out.print(user.getName() + " => ");
            for (User amigo : user.getAmistades()) {
                if (!visitado.contains(amigo.getId())) {
                    visitado.add(amigo.getId());
                    cola.add(amigo);
                }
            }
        }
        System.out.println();
    }
}

