import java.util.*;

public class RedAlmacenesInt {
    int id;
    String nombre;

    public RedAlmacenesInt(int id, String nombre) {
        this.id = id;
        this.nombre = nombre;
    }
}

class Grafo {
    private int V; // número de vértices
    private LinkedList<Integer>[] adj; // listas de adyacencia para cada vértice
    private Map<Integer, RedAlmacenesInt> almacenes;

    // Constructor
    public Grafo(int V) {
        this.V = V;
        adj = new LinkedList[V];
        almacenes = new HashMap<>();
        for (int i = 0; i < V; ++i) {
            adj[i] = new LinkedList<>(); // Inicializar lista de adyacencia para cada vértice
        }
    }

    // Método para agregar un almacén
    public void agregarAlmacen(int id, String nombre) {
        RedAlmacenesInt almacen = new RedAlmacenesInt(id, nombre);
        almacenes.put(id, almacen);
    }

    // Método para agregar una arista
    public void agregarArista(int v, int w) {
        adj[v].add(w); // Añadir w a la lista de adyacencia de v
        adj[w].add(v); // Añadir v a la lista de adyacencia de w (grafo no dirigido)
    }

    // Implementación de BFS
    public void BFS(int inicio) {
        boolean[] visitado = new boolean[V]; // Array de visitados
        LinkedList<Integer> cola = new LinkedList<>(); // Cola para BFS

        visitado[inicio] = true; // Marcar el nodo de inicio como visitado
        cola.add(inicio); // Añadirlo a la cola

        while (!cola.isEmpty()) {
            inicio = cola.poll(); // Extraer el primer nodo de la cola
            System.out.println("Visitando almacén: " + almacenes.get(inicio).nombre); // Procesar el nodo

            // Obtener todos los nodos adyacentes de "inicio"
            for (int n : adj[inicio]) {
                if (!visitado[n]) {
                    visitado[n] = true; // Marcar como visitado
                    cola.add(n); // Añadir a la cola
                }
            }
        }
    }

    // Método auxiliar de DFS que se llama recursivamente
    private void DFSUtil(int v, boolean[] visitado) {
        // Marcar el vértice actual como visitado y mostrarlo
        visitado[v] = true;
        System.out.println("Visitando almacén: " + almacenes.get(v).nombre);

        // Recorrer todos los vértices adyacentes al vértice actual
        for (int n : adj[v]) {
            if (!visitado[n]) {
                DFSUtil(n, visitado); // Llamada recursiva para los vértices no visitados
            }
        }
    }

    // Método principal DFS que llama a DFSUtil
    public void DFS(int inicio) {
        // Array de booleanos para marcar los vértices visitados
        boolean[] visitado = new boolean[V];
        // Llamar al método recursivo DFSUtil comenzando desde el vértice "inicio"
        DFSUtil(inicio, visitado);
    }

    // Método main para ejecutar el ejemplo
    public static void main(String[] args) {
        Grafo redAlmacenes = new Grafo(5);

        redAlmacenes.agregarAlmacen(0, "Almacen A");
        redAlmacenes.agregarAlmacen(1, "Almacen B");
        redAlmacenes.agregarAlmacen(2, "Almacen C");
        redAlmacenes.agregarAlmacen(3, "Almacen D");
        redAlmacenes.agregarAlmacen(4, "Almacen E");

        redAlmacenes.agregarArista(0, 1);
        redAlmacenes.agregarArista(0, 2);
        redAlmacenes.agregarArista(1, 3);
        redAlmacenes.agregarArista(2, 4);

        System.out.println("Recorrido BFS empezando desde Almacen A:");
        redAlmacenes.BFS(0);

        System.out.println("\nRecorrido DFS empezando desde Almacen A:");
        redAlmacenes.DFS(0);
    }
}

